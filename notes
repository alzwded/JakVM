so, register based machine

we want: (in theory) (ignore this)
Accumulator         supports operations on 4,2,1 bytes
Counter             supports operations on 4,2 bytes, used by array funcs
Extra               alt accumulator
Return Register     RX, supports operations on full word
IX                  index register, operations on 4 bytes
JX                  same
PP                  pointer register, uses IX for indexing
QP                  same but uses JX
SP                  user stack pointer
ZP                  system stack pointer, used for CALL and the like
IP                  instruction pointer, autoincrements after each operation
                    except when set by the user or through jumps which sets
                    the IPModif flag ; IPModif is first reset when
                    beginnning an instructino cycle

description of registers
AX, EX              general purpose registers
RX                  used for calling / returning from procedures
                    based on RETURN flag, can contain return value
CX                  count register -- used for repet instructions and such
PP, QP              contain the base address of an array
IX, JX              indexes for those arrays
SP                  user stack pointer
ZP                  system stack pointer <- used to store data between
                    procedure calls
IP                  instruction pointer, incremented after each instruction
                    except when the internal IPModif flag is set
                    the IPModif flag is reset after each check

So we need a Processor struct to hold registers, maybe?
We need jump addresses
We need instructions

so

machine {
    processor*
    memmgr*
}

processor {
    register AX, EX, CX, RX, IX, JX, SP, ZP, PP, QP, IP;
    struct {
        direction:1
        flag:1
        ipmodif:1
        retflag:1
    } flags;
    unsigned long clock; // in ns or us
    // should run at 2 or 3MHz
}

union register {
    struct { uint8_t d, c, b, a; } byte; 
    struct { uint16_t h, l; } half;
    uint16_t word;
}

memory manager {
    unsigned char mem[16 << (10 + 10)];
    // FFxxxx are reserved for various things like framebuffer, input things
    // usr stack begins at FEFFFF and goes down
    // sys stack begins at FEFFFF - stack size and goes up
    // memory snapshot (i.e. program) is loaded at FEFFFF - stack size - 1 -
    //                                - snapshort size, IP is initially
    //                                set to this location
    // memory from 000000 is accessible to user how he sees fit
    struct {
        unsigned char* input1;
        unsigned char* input2;
    } pointers; // used by emulator to set various things

    unsigned char* (access*)(uint8_t b3, uint8_t b2, uint8_t b1);
    uint8_t (get1*)(uint8_t b3, uint8_t b2, uint8_t b1);
    uint16_t (get2*)(uint8_t b3, uint8_t b2, uint8_t b1);
    uint32_t (get4*)(uint8_t b3, uint8_t b2, uint8_t b1);
    void (set1*)(uint8_t b3, uint8_t b2, uint8_t b1, uint8_t val);
    void (set2*)(uint8_t b3, uint8_t b2, uint8_t b1, uint16_t val);
    void (set4*)(uint8_t b3, uint8_t b2, uint8_t b1, uint32_t val);
}

snapshot {
    directives = struct { stackSize:int, etc }
    dataSize = unsigned long;
    data = unsigned char*;
} <- this gets loaded and executed
only the data gets loaded as mentioned above, directives are handled by the
loader

loader {
    void (load*)(machine*, snapshot*);
}

meta:
specify memory size
    pre-allocates that many bytes with fancy allocator :>
    should be:
        total
        stack size / heap size
pre-specify files on filesystem or open/close them with "syscalls"
this means preallocated addresses

!!!no, these will not be implemented
sys calls: 0x0--0xFFFF
0xFFXX: cpu or mem related routines
0xFF00: set mem size (should reset after this)
0xFFFF: reset

0x01XX: filesystem routines & file IO
0x0100: open file for reading
0x0101: open file for writing
0x0102: open file for append
0x0103: open file for readwrite
0x0104: open file for readappend
0x010A: check file exists
0x010F: close file
0x012X: various file informations

0x02XX: IO text routines
0x0200: putc
0x0201: getc
0x02FF: wputc
0x02FE: wgetc

0x03XX: graphics routines
0x04XX: sound routines

instruction set: (rough)
^-- is maintained in is and is_opcodes2

::mem

lod(A, B)
sto(A, B)

mov(A, B);
    A: register, address
    B: immediate, register as data, register as address, address as data, address as address

push(A);
    A: register as data, address as data, address

pop(A);
    A: register, address

::maths

add(A, B);
    A: register
    B: immediate, register as data, register as address

sub(A, B);
mul(A, B);
div(A, B);
divi(A, B);
mod(A, B);

clf
stf

::rel
at
bt
ate
bte
eq
lt
gt
lte
gte

::bitwise
and
or
xor
not
shl
shr
rol
ror

::array functions
find matching
find unmatching
call for each
set direction
clear direction

::jumps, branches, calls
beq
bne
jmp

call;
    Address of instruction taken from A
    pushes context on stack

ret;
    pops context from stack


format of opcode asm file:
file:   file statement
    |   statement
    ;
statement:  asm WS paramlist WS opcode TERM ;
asm:    [a-zA-Z]{2-3}[0-9]? ;
paramlist:  param WS ',' WS param
        |   param
        ;
param:  REGISTER
    |   IMEDIATE
    |   ADDRESS
    ;
opcode: opcode_part opcode_part
    |   opcode_part opcode_part opcode_part opcode_part
    ;
opcode_part:    HEX HEX
        |       OTHER OTHER ;
OTHER:  'x' | '-' ;
REGISTER:   AX, AH, AL, AD, AC, etc...
IMEDIATE:   'x' ;
ADDRESS:    'add' ;
WS:     WS WS_PART 
    |   WS_PART
    ;
WS_PART:    ' ' | '\t' ;
TERM:   '\n' | EOF ;
