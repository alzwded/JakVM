currently 140 not counting duplicates because of stuff like mov1
so waaaaaaaaaaay over 255
so instructions are gonna be 4 bytes long

gotta reduce that number to something more aligned
so this is 32b, okay?
but 16b pipeline

::mem
rst
    reset -- sets everything to 0 :D
    IP set to some default thing

movX    D, X
    move immediate data X into register D

mvr1    D, S
mvr2
mvr4
mvr8
    move data from register S to register D
    1 = one byte
    2 = short
    4 = int
    8 = long

lodX    D, S
    loads data from address S into register D

ldrX    D, S
    loads data into register D from address stored in register S

stoX    D, S
    store data from register S at address D

strX    D, S
    store data from register S at address contained in register D

pusX     R
    push data from register R onto stack

popX     R
    pop data from stack into register R

stf
    sets the FLAG

clf
    resets the FLAG

::maths
addX    D, X
    sums registers D and X and stores result in D

subX
mulX
divX
modX

adiX    D, imediate
    adds imediate value to register D

aduX
suuX
muuX
diuX
mouX
    unsigned variants
    if overflow, sets the FLAG

::relational
eqX     A, B
    unsets the flag if registers A and B are equal
    sets the flag if registers are not equal

neX

atX
    above than -- unsigned >
    sets the flag if not true

btX
    below than -- unsigned <

aeX
beX

ltX
    less than -- signed <

gtX
leX
geX

::bitwise
andX    D, S
    stores the result of bitwise D&S into register D

orX     D, S
xorX

notX    R
    flips the bits of R

shlX    R, X
    shifts register R to the left X positions
    sets the carry flag if overflow

shrX    R, X
rolX
rorX

::array

acrX R, P
    access item @PP[IX] or @QP[JX] and store it in AX or EX

acwX P, R
    store AX or EX @PP[IX] or @QP[JX]

forX P
    sets IPMODIF flag
    P can be PP or QP and uses IX or JX as indexes (TODO wtf?)
    resets return flag
    pushes registers on sys stack *
        for IX or JX (depending on which is used)
        it pushes them incremented on the stack based on the value of X
            and based on the value of the direction flag
    if CX is one, decrement CX, increments IP, swaps RX and IP
    if CX is zero, do nothing
    if CX is other, decrements CX, swaps RX and IP

rep
    sets IPMODIF flag
    resets return flag
    pushes registers on sys stack
    if CX is one, increments IP, swaps RX and IP
    if CX is zero, do nothing
    else decrement CX, swap RX and IP

ref
    sets IPMODIF flag
    pushes registers on sys stack
    if FLAG is set, swap IP and RX
    else do nothing

std
    set direction flag

cld
    clear direction flag

::jumping
bfn     A
    sets IPMODIF flag
    branches to address/label/relative A if flag is not set
    branch if flag is not set

bfs     A
    sets IPMODIF flag
    branch if flag is set

jmp     A
    sets IPMODIF flag
    jumps to label A unconditionally
    internally, it's a relative jump
    for absolute jumps, use jrx?

jrx
    sets IPMODIF flag
    if high bits of RX are 00 then increments IP and swaps RX and IP
    if high bits of RX are FF then swaps RX and IP, adds RX to IP and
        increments RX

cal
    sets IPMODIF flag
    pushes all registers on sys stack
    increments IP then swaps RX and IP

str
    sets return flag

clr
    resets return flag

ret
    sets IPMODIF flag
    pops registers from sys stack
    if RETFLAG is 1 RX is left unmodified (can be used for return value)
    if RETFLAG is 0 RX is also popped from the stack

::timing
sti X
    set timer interval to immediate X which is a tick count

slp
    run no-ops until timer set with sti is depleted
