.stack 4M                   ; total addressable memory = 16M
                            ; some are reserved for ports
                            ; first instruction is @0
                            ; ports begin @FFFFFF and go down
                            ; stack begins after ports end and goes down
                            ; @HI_STACK there is the user stack and 
                            ;           it shrinks
                            ; @LOW_STACK there is the procedure call stack
                            ;            and it grows
                            ; @LOW_STACK-1 the data segment begins and goes
                            ;              down

.data
hex1    h2      0xDEAD
hex2    h2      0xBEEF
hex4    h4      0xAB2ACADA
addr    addr    ABCDEF
nb      d2      0d12345
str     string  'Mary had a little lamb'
array   ah1     A, B, C, D
pixel1_1    addr    FF4A00  ; in theory. Some addresses are reserved for
                            ; ports, duh

.code
begin:
    mov2    AH, 0
    mov2    AL, 0
    mov2    EH, hex1
    mov2    EL, hex2
    add4    AX, EX
    add4    EX, 1
    sto4    AX, pixel1_1
    jmp     begin:
    jmp     @0080C0
    jmp     -0d13
    jmp     -0xD
    jmp     -0b1101
.include 'toolkit.a'    ; literally include code from another assembly here
                        ; however, data definitions are appended and 
                        ; some directives can be ignored
special:
    nop
    nop
    nop
